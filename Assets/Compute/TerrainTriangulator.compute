#pragma kernel CSMain

struct VertexData
{
    float3 position;
    float3 normal;
    float4 tangent;
    float2 texCoord0;
};

Texture2D heightMap;

RWStructuredBuffer<VertexData> vertices;
RWStructuredBuffer<int> triangles;

float heightAmplitude;

uint texWidth, texHeight, texLevels;

float3 NormalFromHeight(uint2 id)
{
    float L = heightMap.Load(int3(id.x - 1, id.y, 0)).g * heightAmplitude;
    float R = heightMap.Load(int3(id.x + 1, id.y, 0)).g * heightAmplitude;
    float T = heightMap.Load(int3(id.x, id.y - 1, 0)).g * heightAmplitude;
    float B = heightMap.Load(int3(id.x, id.y + 1, 0)).g * heightAmplitude;
    
    return -normalize(float3(2 * (R - L), -4, 2 * (B - T)));
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    heightMap.GetDimensions(0, texWidth, texHeight, texLevels);
    
    if (id.x > (texWidth - 2) || id.y > (texHeight - 2))
        return;
    
    VertexData vert;
    float height;
    
    if (id.x == (texWidth - 2) && id.y == (texHeight - 2))
    {
        // needs all corners
        height = heightMap.Load(int3(id.x, id.y, 0)).g * heightAmplitude;
        
        vert.tangent = 0;
        
        vert.position = float3(id.x, height, id.y);
        vert.normal = NormalFromHeight(id.xy);
        vert.texCoord0 = float2(id.x / (float) texWidth, id.y / (float) texHeight);
        
        vertices[texWidth * id.y + id.x] = vert;
        
        height = heightMap.Load(int3(id.x, id.y + 1, 0)).g * heightAmplitude;
        
        vert.position = float3(id.x, height, id.y + 1);
        vert.normal = NormalFromHeight(id.xy + uint2(0, 1));
        vert.texCoord0 = float2(id.x / (float) texWidth, (id.y + 1) / (float) texHeight);
        
        vertices[texWidth * (id.y + 1) + id.x] = vert;
        
        height = heightMap.Load(int3(id.x + 1, id.y + 1, 0)).g * heightAmplitude;
        
        vert.position = float3(id.x + 1, height, id.y + 1);
        vert.normal = NormalFromHeight(id.xy + uint2(1, 1));
        vert.texCoord0 = float2((id.x + 1) / (float) texWidth, (id.y + 1) / (float) texHeight);
        
        vertices[texWidth * (id.y + 1) + id.x + 1] = vert;
        
        height = heightMap.Load(int3(id.x + 1, id.y, 0)).g * heightAmplitude;
        
        vert.position = float3(id.x + 1, height, id.y);
        vert.normal = NormalFromHeight(id.xy + uint2(1, 0));
        vert.texCoord0 = float2((id.x + 1) / (float) texWidth, id.y / (float) texHeight);
        
        vertices[texWidth * id.y + id.x + 1] = vert;
    }
    else if (id.y == (texHeight - 2))
    {
        // needs bottom left and top left
        
        vert.tangent = 0;
        
        height = heightMap.Load(int3(id.x, id.y, 0)).g * heightAmplitude;
        
        vert.position = float3(id.x, height, id.y);
        vert.normal = NormalFromHeight(id.xy);
        vert.texCoord0 = float2(id.x / (float) texWidth, id.y / (float) texHeight);
        
        vertices[texWidth * id.y + id.x] = vert;
        
        height = heightMap.Load(int3(id.x, id.y + 1, 0)).g * heightAmplitude;
        
        vert.position = float3(id.x, height, id.y + 1);
        vert.normal = NormalFromHeight(id.xy + uint2(0, 1));
        vert.texCoord0 = float2(id.x / (float) texWidth, (id.y + 1) / (float) texHeight);
        
        vertices[texWidth * (id.y + 1) + id.x] = vert;
    }
    else if (id.x == (texWidth - 2))
    {
        // needs top right and top left
        
        vert.tangent = 0;
        
        height = heightMap.Load(int3(id.x, id.y, 0)).g * heightAmplitude;
        
        vert.position = float3(id.x, height, id.y);
        vert.normal = NormalFromHeight(id.xy);
        vert.texCoord0 = float2(id.x / (float) texWidth, id.y / (float) texHeight);
        
        vertices[texWidth * id.y + id.x] = vert;
        
        height = heightMap.Load(int3(id.x + 1, id.y, 0)).g * heightAmplitude;
        
        vert.position = float3(id.x + 1, height, id.y);
        vert.normal = NormalFromHeight(id.xy + uint2(1, 0));
        vert.texCoord0 = float2((id.x + 1) / (float) texWidth, id.y / (float) texHeight);
        
        vertices[texWidth * id.y + id.x + 1] = vert;
    }
    else
    {
        // needs only top left
        
        vert.tangent = 0;
        
        height = heightMap.Load(int3(id.x, id.y, 0)).g * heightAmplitude;
        
        vert.position = float3(id.x, height, id.y);
        vert.normal = NormalFromHeight(id.xy);
        vert.texCoord0 = float2(id.x / (float) texWidth, id.y / (float) texHeight);
        
        vertices[texWidth * id.y + id.x] = vert;
    }
    
    uint index = texWidth * id.y + id.x;
    
    triangles[index * 2 * 3] = index;
    triangles[index * 2 * 3 + 1] = texWidth * (id.y + 1) + id.x;
    triangles[index * 2 * 3 + 2] = texWidth * (id.y + 1) + id.x + 1;
    
    triangles[(index * 2 + 1) * 3] = index;
    triangles[(index * 2 + 1) * 3 + 1] = texWidth * (id.y + 1) + id.x + 1;
    triangles[(index * 2 + 1) * 3 + 2] = texWidth * id.y + id.x + 1;
}
