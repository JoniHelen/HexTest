#pragma kernel CSMain

struct VertexData
{
    float3 position;
    float3 normal;
    float4 tangent;
    float2 texCoord0;
};

Texture2D heightMap;
SamplerState bilinearClampSampler;

RWStructuredBuffer<VertexData> vertices;
RWStructuredBuffer<int> triangles;

float heightAmplitude;

uint maxWidth, maxHeight;

float3 NormalFromHeight(float2 uv)
{
    float L = heightMap.SampleLevel(bilinearClampSampler, uv - float2(0.001, 0), 0).g * heightAmplitude;
    float R = heightMap.SampleLevel(bilinearClampSampler, uv + float2(0.001, 0), 0).g * heightAmplitude;
    float T = heightMap.SampleLevel(bilinearClampSampler, uv - float2(0, 0.001), 0).g * heightAmplitude;
    float B = heightMap.SampleLevel(bilinearClampSampler, uv + float2(0, 0.001), 0).g * heightAmplitude;
    
    return -normalize(float3(2 * (R - L), -4, 2 * (B - T)));
}

VertexData GetVertexData(uint2 id)
{
    float2 uv = float2(id.x / (float) maxWidth, id.y / (float) maxHeight);
    VertexData vert;
    vert.tangent = 0;
    vert.position = float3(id.x, heightMap.SampleLevel(bilinearClampSampler, uv, 0).g * heightAmplitude, id.y);
    vert.normal = NormalFromHeight(uv);
    vert.texCoord0 = uv;
    return vert;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= maxWidth || id.y >= maxHeight)
    {
        return;
    }
    
    uint quadID = maxWidth * id.y + id.x;
    
    uint topLeftVertexID = quadID + id.y;
    uint bottomLeftVertexID = topLeftVertexID + maxWidth + 1;
    uint topRightVertexID = topLeftVertexID + 1;
    uint bottomRightVertexID = bottomLeftVertexID + 1;
    
    if (id.x == maxWidth - 1 && id.y == maxHeight - 1)
    {
        // needs all corners
        vertices[topLeftVertexID] = GetVertexData(id.xy);
        vertices[bottomLeftVertexID] = GetVertexData(id.xy + uint2(0, 1));
        vertices[bottomRightVertexID] = GetVertexData(id.xy + 1);
        vertices[topRightVertexID] = GetVertexData(id.xy + uint2(1, 0));
    }
    else if (id.y == maxHeight - 1)
    {
        // needs bottom left and top left
        vertices[topLeftVertexID] = GetVertexData(id.xy);
        vertices[bottomLeftVertexID] = GetVertexData(id.xy + uint2(0, 1));
    }
    else if (id.x == maxWidth - 1)
    {
        // needs top right and top left
        vertices[topLeftVertexID] = GetVertexData(id.xy);
        vertices[topRightVertexID] = GetVertexData(id.xy + uint2(1, 0));
    }
    else
    {
        // needs only top left
        vertices[topLeftVertexID] = GetVertexData(id.xy);
    }
    
    uint index = quadID * 6;
    
    triangles[index] = topLeftVertexID;
    triangles[index + 1] = bottomLeftVertexID;
    triangles[index + 2] = bottomRightVertexID;
    
    triangles[index + 3] = topLeftVertexID;
    triangles[index + 4] = bottomRightVertexID;
    triangles[index + 5] = topRightVertexID;
}
